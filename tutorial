
# ===========================================================================
# Collection of recommended first steps for an awesome Linux installation
# Information gleaned from the excellent resources at the Arch wiki.
# Include partitioning, setting up a bootloader, installing Arch base, and
# building a more complete desktop experience from there
# ===========================================================================


# ===========================================================================
#
# OBTAINING AND USING ARCHISO
#
# ===========================================================================


# Download iso from any respectable mirroring service.
# Ensure USB is set up correctly. Recommend ext2 on gpt, then copy image:
dd bs=4M if=/path/to/arch.iso of=/dev/sdx status=progress oflag=sync
# Don't include partition number in /dev/sdx
# Reboot from this USB

# Once running:
loadkeys uk

# Ensure you're in UEFI mode
ls /sys/firmware/efi/efivars

# Update system clock
timedatectl set-ntp true


# ===========================================================================
#
# PARTITIONING
#
# ===========================================================================


# For a basic set-up, You will need the following:
# /boot - 512MB
# /     - About 20GB max
# /swap - About 2GB
# /home - The rest
# Do this using gdisk. It has a good cmd line interface. You'll need partition
# codes ef00 to make an EFI boot partiion, and 8e00 for LVM. 

# If you're intending to go LVM, don't worry about /, /home and /swap yet.
# Just lump these together into one big partition for now. You will
# still need a separate /boot.

# If RAIDing, you may need to divide each disc into two partitions plus a
# /boot partition.

# Use lsblk to see partitions
# The harddrive/ssd you'll be partitioning will be /dev/sdx, where x is a letter
# Each partition on this device will be /dev/sdx#, where # is a number.
# Note which number is the boot and which is the root, as this guide doesn't
# distinguish which you'll need, but it should be obvious in context.

# ===========================================================================
# BOOT PARTITION
# ===========================================================================

# Partition 512MB GPT for an EFI System Partition (ESP). Use gdisk, EF00.
# Then, format with FAT32 filesystem:
mkfs.fat -F32 /dev/sdx#

# ===========================================================================
# OPTIONAL -- RAID
# ===========================================================================

# Coming whenever I figure it out

# ===========================================================================
# OPTIONAL -- ENCRYPTION
# ===========================================================================

# Step 1: Clean your disk. Could take a while, especially for large disks.

# First, create encrypted partition (sdx# for one partition, sdx for disk)
cryptsetup open --type plain /dev/sdx# container --key-file /dev/random

# Check it exists with lsblk, then:
dd if=/dev/zero of=/dev/mapper/container status=progress
# Warning: can take hours for a large HDD

# Close container
cryptsetup close container

# Step 2: Create LUKS encrypted container

cryptsetup luksFormat --type luks2 /dev/sdx#
cryptsetup open /dev/sdx# cryptrootname

# At this point, make a filesystem at /dev/mapper/cryptroot and mount. Or,
# progress to LVM.

# ===========================================================================
# OPTIONAL -- LVM
# ===========================================================================

# Check devices
lvmdiskscan

# Create physical volume on desired target. If you just encrypted, this
# should be /dev/mapper/cryptrootname
pvcreate /dev/sdx#

# Create a volume group
vgcreate MyVolGroup /dev/sdx#

# This can be extended to other physical volumes:
vgextend MyVolGroup /dev/sdZ

# Create logical volumes
lvcreate -L 2G MyVolGroup -n swap
lvcreate -L 15G MyVolGroup -n root
lvcreate -l 100%FREE MyVolGroup -n home # Note lower case l!

# Format each
mkfs.ext4 /dev/mapper/MyVolGroup-root
mkfs.ext4 /dev/mapper/MyVolGroup-home
mkswap /dev/mapper/MyVolGroup-swap

# ===========================================================================
# FINAL STEPS
# ===========================================================================

# Mount root, home, boot
# Example here assumes an LVM install with separate /boot
mount /dev/mapper/MyVolGroup-root /mnt
mkdir /mnt/home
mount /dev/mapper/MyVolGroup-home /mnt/home
swapon /dev/mapper/MyVolGroup-swap
mkdir /mnt/boot
mount /dev/sdx# /mnt/boot # mount whichever device is the boot partition


# ===========================================================================
# 
# NETWORKING
# 
# ===========================================================================


# Wired connections should work okay. Wireless is trickier.

# To get name of device:
ip link

# Then, set up a netctl profile. Copy /etc/netctl/examples/wireless-wpa to
# /etc/netctl/myprofile. Update interface, SSID and key as necessary, then:
netctl start myprofile
# Note, arch may not ship with netctl anymore. Check wiki.

# Test with:
ping archlinux.org


# ===========================================================================
# 
# INSTALLING ARCH
# 
# ===========================================================================


# Use pacstrap to build a basic Arch system
pacstrap /mnt base linux linux-firmware


# ===========================================================================
# 
# CONFIGURING ARCH
# 
# ===========================================================================


# Generate fstab file
genfstab -U /mnt >> /mnt/etc/fstab

# Copy over netctl profile, if needed, or make one from scratch later
cp /etc/netctl/myprofile /mnt/etc/netctl/myprofile

# choot in
arch-chroot /mnt

# Update
pacman -Syu

# get vim
pacman -S vim

# Set timezone
ln -sf /usr/share/zoneinfo/GB /etc/localtime
hwclock --systohc

# Uncomment locales in /etc/locale.gen
en_GB.UTF-8 UTF-8
de_DE.UTF-8 UTF-8
# Then:
locale-gen

# Set LANG variable in /etc/locale.conf
LANG=en_GB.UTF-8

# Set keyboard in /etc/vconsole.conf
KEYMAP=uk

# Set hostname in /ec/hostname
<my_comp_name>

# Install networking tools
pacman -S iw wpa_supplicant netctl dhcpcd
# Remember to make a netctl profile here if you didn't copy one over before

# If you used LVM, you will need to download lvm2
pacman -S lvm2
# then edit /etc/mkinitcpio.conf
HOOKS=(... keyboard keymap block encrypt lvm2 ... filesystems ...)
# and recreate initramfs image...
mkinitcpio -p linux

# Set root password
passwd

# For Intel CPUs:
pacman -S intel-ucode

# Get essential cmd line tools and other 'essentials'
pacman base-devel zsh man git stow tmux openssh gnupg keychain cmake python python3 lua unzip swig

# create user account
useradd -m -s /bin/zsh liam
passwd liam
# add to sudoers with visudo
# find line containing 'root ALL=(ALL) ALL', add line 'liam ALL=(ALL) ALL'

# Make .bash_local in home directory. This should include, at a minimum:
export WLAN=<wlan_device>


# ===========================================================================
# 
# INSTALLING GRUB
# 
# ===========================================================================


# Get grub
pacman -S grub efibootmgr

# install
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub

# Edit /etc/default/grub
# Uncomment colours, if desired. Defaults to black and white.

# If encrypted, set:
GRUB_CMDLINE_LINUX="... cryptdevice=/dev/sdx#:cryptrootname"

# If LVM, edit /etc/default/grub to include:
GRUB_PRELOAD_MODULES="... lvm"
GRUB_CMDLINE_LINUX="... root=/dev/mapper/MyVolGroup-root"

# Then, make grub.cfg
grub-mkconfig -o /boot/grub/grub.cfg

# To find and include other systems:
pacman -S os-prober
# and mount any other partitions before remaking grub.cfg

# ===========================================================================
# 
# WORKING WITHIN THE NEW OS
# 
# ===========================================================================
# At this point, you can safely quit your chroot environment, umount any
# partitions, and reboot the system. If you're lucky, it all worked.
# Everything from this point onwards should be performed as a standard user;
# not as root.
# ===========================================================================


# ===========================================================================
# 
# SECURE NETWORKING
# 
# ===========================================================================


# Generate SSH key pair
ssh-keygen
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_rsa

# Generate GnuPG key pair

gpg --full-gen-key

# ===========================================================================
# 
# CONNECT TO GIT
# 
# ===========================================================================


# log in to GitHub and add ~/.ssh/id_rsa.pub. You may have to do
# this using a different device with a functioning web browser.

# Get dotfiles
git clone git@github.com:LiamPattinson/dotfiles.git

# Enter dir, stow any desired packages.
# This should include everything but conky -- this will need to be
# installed later.
# Be sure that your $HOME directory has the required directory structure
# being stowing -- if it doesn't, it'll create symlink directories to the
# ~/dotfiles dir, which will cause all kinds of problems.


# ===========================================================================
#
# UPGRADES
#
# ===========================================================================

mkdir ~/Downloads
cd ~/Downloads

# zsh, with oh-my-zsh
curl -o oh-my-zsh-install.sh https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh
chmod u+x oh-my-zsh-install.sh
./oh-my-zsh-install.sh

# Go into .oh-my-zsh/custom/plugins
git clone https://github.com/zsh-users/zsh-syntax-highlighting
git clone https://github.com/zsh-users/zsh-autosuggestions

# This will, quite rudely, push your .zshrc to .zshrc.pre-oh-my-zsh.
# Fix this by calling `stow zsh` from ~/dotfiles.

# vim, with vundle
git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
vim +PluginInstall +qall

# tmux
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
# Run tmux, call Prefix+I


# ===========================================================================
#
# GRAPHICS
#
# ===========================================================================


# Enable x-graphics, provide startx command for firing it up.
# Note: may need extensions from xorgs-apps group
xorg-server xorg-xinit xorg-xrdb
xorg-xbacklight xorg-xrandr xorg-xgamma xscreensaver xcompmgr

# Intel graphics
xf86-video-intel mesa
# Or you're on a decent machine...
nvidia nvidia-utils
# Or perhaps some specific driver name

# Optional, but recommended
gtk3 qt5-base
# Many later packages have these as a dependency. Installing them here will
# allow for more accurate package sizes later.


# ===========================================================================
#
# DESKTOP ENVIRONMENT
#
# ===========================================================================


# Minimalist LXDE, with:
# * Openbox window manager
# * no display manager
# * tint2 taskbar
# * urxvt terminal emulator
# * pcmanfm file viewer
# * alsa + pulseaudio sound control
# * feh + imagemagick image viewer
# * xpdf pdf viewer
# * vlc media player (has useful codecs as dependencies)
pacman -S lxde-common lxsession openbox openbox-themes lxappearance-obconf tint2\
    pcmanfm-gtk3 alsa-utils pulseaudio xpdf rxvt-unicode feh imagemagick vlc

# Download the following fonts at a minimum
gsfonts ttf-roboto ttf-hack ttf-droid ttf-liberation ttf-dejavu

# Download the following icon themes
adwaita-icon-theme hicolor-icon-theme papirus-icon-theme

# Set desktop background:
feh --bg-center dotfiles/ArchBlueWall.jpg

# To enable Python IDLE
tk

# conky
# For simple install:
conky
# For a more complex install which allows Lua extensions, use the AUR version
# (Github version has issues with build system)
# This is currently mandatory if using the conky config in dotfiles.
cd ~/Downloads/AUR
git clone https://aur.archlinux.org/conky-lua.git
cd conky-lua
makepkg -sirc

# To get a collection of Arch artwork:
cd ~Downloads/AUR
git clone https://aur.archlinux.org/archlinux-artwork
cd archlinux-artwork
makepkg -sirc

# ===========================================================================
#
# MEDIA
#
# ===========================================================================

# Web-browsing / Email client
firefox thunderbird

# Video player, DVD support
vlc


# ===========================================================================
# 
# DEVELOPER / SCIENTIST KIT
#
# ===========================================================================


# Debugging
gdb valgrind 

# Miniconda (install to opt)
# Install with:
curl -o miniconda3_install.sh 'https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh'
# When prompted, tell it to install to /opt/anaconda
# To enter/leave anaconda environment, call
conda activate/deactivate
# Install the following at a minimum:
conda install numpy scipy matplotlib seaborn pandas scikit-learn 

# HPC components
gcc-fortran blas lapack fftw openmpi hdf5

# Optional bloaty things
gnuplot octave

# LaTeX
# Minimum                                                    (large download)
texlive-core texlive-bin biber
# To get some more obscure packages:                        (medium download)
texlive-latexextra
# For various mathematics and science packages:              (small download)
texlive-science
# For publications, you may need:                           (medium download)
texlive-publishers


# ===========================================================================
#
# NOTES
#
# ===========================================================================

# pacman will hold on to everything you install. To clear the cache of unused files:
pacman -Sc
# to clear the cache of all files, even those currently in use:
pacman -Scc
# Say you install package A, which has B as a requirement. You remove A. pacman will
# not automatically remove B. To do so:
pacman -Rns $(pacman -Qtdq)
